//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Diwide.Arkanoid
{
    public partial class @PlayerControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Player1"",
            ""id"": ""e41c36f9-89a3-4f94-b89e-90bd5f6120b4"",
            ""actions"": [
                {
                    ""name"": ""move"",
                    ""type"": ""Value"",
                    ""id"": ""4960263a-523a-4819-aa79-d7427acf87b5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""start"",
                    ""type"": ""Button"",
                    ""id"": ""024a85df-b968-4159-85b9-69fd0bca8b03"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""4bda6a6d-8ad6-4281-bbbc-460484989fe0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""252ed987-cbb1-45ca-9ce9-bb3ee826e7b6"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3ecb605e-ed47-474f-a2c5-0878bd80cb87"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4b753d4b-260f-4ae3-badc-6fa6decb34d9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""eec5cbf3-041d-46d3-a9bd-303e9f38fd86"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1d7c8283-a565-46c8-a4da-6a1bd7bc24f0"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Player1
            m_Player1 = asset.FindActionMap("Player1", throwIfNotFound: true);
            m_Player1_move = m_Player1.FindAction("move", throwIfNotFound: true);
            m_Player1_start = m_Player1.FindAction("start", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Player1
        private readonly InputActionMap m_Player1;
        private List<IPlayer1Actions> m_Player1ActionsCallbackInterfaces = new List<IPlayer1Actions>();
        private readonly InputAction m_Player1_move;
        private readonly InputAction m_Player1_start;
        public struct Player1Actions
        {
            private @PlayerControls m_Wrapper;
            public Player1Actions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @move => m_Wrapper.m_Player1_move;
            public InputAction @start => m_Wrapper.m_Player1_start;
            public InputActionMap Get() { return m_Wrapper.m_Player1; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(Player1Actions set) { return set.Get(); }
            public void AddCallbacks(IPlayer1Actions instance)
            {
                if (instance == null || m_Wrapper.m_Player1ActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_Player1ActionsCallbackInterfaces.Add(instance);
                @move.started += instance.OnMove;
                @move.performed += instance.OnMove;
                @move.canceled += instance.OnMove;
                @start.started += instance.OnStart;
                @start.performed += instance.OnStart;
                @start.canceled += instance.OnStart;
            }

            private void UnregisterCallbacks(IPlayer1Actions instance)
            {
                @move.started -= instance.OnMove;
                @move.performed -= instance.OnMove;
                @move.canceled -= instance.OnMove;
                @start.started -= instance.OnStart;
                @start.performed -= instance.OnStart;
                @start.canceled -= instance.OnStart;
            }

            public void RemoveCallbacks(IPlayer1Actions instance)
            {
                if (m_Wrapper.m_Player1ActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayer1Actions instance)
            {
                foreach (var item in m_Wrapper.m_Player1ActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_Player1ActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public Player1Actions @Player1 => new Player1Actions(this);
        public interface IPlayer1Actions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnStart(InputAction.CallbackContext context);
        }
    }
}
